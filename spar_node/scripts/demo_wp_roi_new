#!/usr/bin/env python3

# integration with ROI, breadcrumb and RVIZ markers

from argparse import ArgumentError
import sys
from math import *
from std_msgs.msg import UInt8
import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus

from geometry_msgs.msg import Point, PoseStamped

from nav_msgs.msg import Path

from spar_msgs.msg import FlightMotionAction, FlightMotionGoal

from vision_msgs.msg import ObjectHypothesisWithPose

from sensor_msgs.msg import BatteryState

from visualization_msgs.msg import Marker   

# Libraries for interfacing with BreadCrumb
from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest
import numpy as np



# This is getting a bit more complicated now, so we'll put our information in
# a class to keep track of all of our variables. This is not so much different
# to the previous methods, other than the fact that the class will operate
# within itself.
# i.e. it will have it's own publishers, subscribers, etc., that
# will call it's own functions as callbacks, etc.
class Guidance():
	def __init__(self, waypoints, surveyAltitude):
		self.surveyAltitude = surveyAltitude
		# Make sure we have a valid waypoint list
		# Safe boundary values, default to X<2,Y<2,Z<2.
		self.safeRangeX = rospy.get_param("~safeRangeX", 4)
		self.safeRangeY = rospy.get_param("~safeRangeY", 2.5)
		self.safeRangeZ = rospy.get_param("~safeRangeZ", 4) 
		print("Survey Alt: ",self.surveyAltitude)
		if not self.check_waypoints(waypoints):
			raise ArgumentError("Invalid waypoint list input!")

		# Internal counter to see what waypoint were are up to
		self.waypoint_counter = 0
		self.waypoint_counter = 0
		

		#Aruco storage and landing logic
		#This will be checked to see if the drone has landed, before attempting a land and finishing the mission
		#logical checks for mission objecive completion
		self.completed_payload_1 = False
		self.completed_payload_2 = False
		self.completed_search = False
		self.mission_complete = False
		self.land_staging = False
		self.landed = False #Only triggered True at end of flight
		self.target1 = False
		self.target2 = False

		# Aruco marker array 
		self.markers = np.full((101, 2), np.nan)

		# Variables for the battery function 
		self.batt_check = 0.15
		self.battery = False
		
		# Printing altitude to terminal
		rospy.loginfo("Altitude is set to: {}".format(surveyAltitude))

		######## HARD CODED LANDING MARKER ID AND COORDINATES ##########
		self.landing_marker = 40
		#self.markers[self.landing_marker,:] = [1.5,-1.5]
		
		#Create a publisher for payload commands
		self.pub_payload = rospy.Publisher('payloadcommands', UInt8, queue_size=2)

		# Set a flag to indicate that we are doing a specific inspection
		# and that we are not following our waypoint list
		# This will stop our "waypoint is reached" callback from firing
		# during the roi diversion and taking over our flight!
		self.performing_roi = False

		# Save the input waypoints
		self.waypoints = waypoints
		# Display the full path
		self.display_path(waypoints,"/guidance/fullPath")

##################### changed tolerance ##########################
		# Make some space to record down our current location
		self.current_location = Point()
		# Set our linear and rotational velocities for the flight
		self.vel_linear = rospy.get_param("~vel_linear", 0.4)
		
		#self.vel_yaw = rospy.get_param("~vel_yaw", 0.2)
		# Set our position and yaw waypoint accuracies
		self.accuracy_pos = rospy.get_param("~acc_pos", 0.3)
		self.accuracy_yaw = rospy.get_param("~acc_yaw", 1.0)
		# Get survey altitude
		self.surveyAltitude = rospy.get_param("~surveyAlt", 1.0)

		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()

		# Wait to connect with Breadcrumb (Warning, you code might get stuck in here if breadcrumb is not running)
		# Code will error if you try to connect to a service
		# that does not exist
		
		##########BREADCRUMB DEACTIVATED ####################################################################################
		rospy.wait_for_service('/breadcrumb/request_path')
		self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path', RequestPath)

		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting waypoint mission")

			# Setup first waypoint segment
			# XXX:	Another option would be to do "takeoff" and leave "waypoint_counter = 0" to
			#		begin the mission at the first waypoint after take-off
			rospy.loginfo("Doing first waypoint / maybe takeoff")
			self.send_wp(self.waypoints[0])
			self.waypoint_counter += 1
			# Initialisation breadcrumb waypoints
			self.breadcrumbWPSnextIndex = 0
			self.breadcrumbMode = False
			self.breadcrumbWPS = []

			# Setup a timer to check if our waypoint has completed at 20Hz
			rospy.loginfo("Setting callbacks")
			self.timer = rospy.Timer( rospy.Duration(1.0/20.0), self.check_waypoint_status )
			# Callback to save "current location" such that we can perform and return
			# from a diversion to the correct location
			# XXX: These topics could be hard-coded to avoid using a launch file
			self.sub_pose = rospy.Subscriber("/mavros/local_position/pose", PoseStamped, self.callback_pose)
			#self.sub_pose = rospy.Subscriber("uavasr/pose", PoseStamped, self.callback_pose)
			
			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("/target_detection/roi", ObjectHypothesisWithPose, self.callback_detection)
			
			# Subscriber to battery topic for future safety landing automation 
			self.sub_battery = rospy.Subscriber("/mavros/battery", BatteryState, self.callback_battery)
			
			# Publisher for sending marker info to RVIZ 
			self.marker_pub = rospy.Publisher('visualization_marker', Marker, queue_size=3, latch=True)

			# XXX: Could have a publisher to output our waypoint progress
			# throughout the flight (should publish each time the waypoint
			# counter is increased). Note: will also need to import "Float32"
			# from "std_msgs.msg" in the header
			# self.pub_progress = rospy.Subscriber("~waypoint_progress", Float32, 10)

			# If shutdown is issued (eg. CTRL+C), cancel current
	 		# mission before rospy is shutdown.
			rospy.loginfo("Running callbacks while not shutdown...")
			rospy.on_shutdown( lambda : self.shutdown() )

	# This function will check if a list of waypoints is in the format we expect
	def check_waypoints(self, wps):
		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False

		# If we haven't returned false yet, then waypoints look good!
		return True


	# This function will check if a waypoint is in the format we expect
	def check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# Check if the waypoint is inside the net for X, Y and Z:
		if abs(wp[0]) > self.safeRangeX or abs(wp[1]) > self.safeRangeY or wp[2] > self.safeRangeZ:
			rospy.logwarn("wp values x: {} y: {} z {}".format(wp[0], wp[1], wp[2]))
			rospy.logwarn("Waypoint has an invalid size for O134 (must be -{}<X<{}/-{}<Y<{}/Z<{}/Yaw)".format(self.safeRangeX,self.safeRangeX,self.safeRangeY,self.safeRangeY,self.safeRangeZ))
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True


	# This function will make sure we shut down the node as safely as possible
	def shutdown(self):
		# Unregister anything that needs it here
		rospy.loginfo("Unregistering topics and shuting down...")
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		self.spar_client.cancel_goal()

		rospy.loginfo("Guidance stopped")


	# This function will check receive the current pose of the UAV constantly
	def callback_pose(self, msg_in):
		# Store the current position at all times so it can be accessed later
		# rospy.loginfo("Updating Pose UAV...")
		self.current_location = msg_in.pose.position

	# RVIZ Target 1
	def target_one(self, data):
		location = data.pose.pose

		# # Message header variables 
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now() 

		# Marker variables
		msg_out.ns = "Target 1"               # Namespace 
		msg_out.id = 0                      # ID of the marker
		msg_out.type = Marker.CYLINDER      # Shape choice 
		msg_out.action = Marker.ADD         # Action is to add / create a new marker
		msg_out.lifetime = rospy.Time(0)    # Lifetime set to Time(0) will make it last forever
		msg_out.frame_locked = True         # Locking frame in place in RVIZ

		
		# Marker Global coordinates 
		msg_out.pose.position.x = location.position.x
		msg_out.pose.position.y = location.position.y
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Setting scale of marker (m)
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.2
		msg_out.scale.z = 0.5

		# Colour - pink 
		msg_out.color.b = (127/255)
		msg_out.color.g = (0/255)
		msg_out.color.r = (255/255)
		msg_out.color.a = 1.0

		# Publishing the marker to RVIZ 
		rospy.loginfo('Publishing Target 1 Marker to RVIZ')
		self.marker_pub.publish(msg_out)

		rospy.loginfo("[x: %0.2f; y: %0.2f]" % (location.position.x,
						location.position.y))

	# RVIZ Target 2
	def target_two (self, data):
		location = data.pose.pose

		# # Message header variables 
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now() 

		# Marker variables
		msg_out.ns = "Target 2"             # Namespace 
		msg_out.id = 0                      # ID of the marker
		msg_out.type = Marker.CYLINDER      # Shape choice 
		msg_out.action = Marker.ADD         # Action is to add / create a new marker
		msg_out.lifetime = rospy.Time(0)    # Lifetime set to Time(0) will make it last forever
		msg_out.frame_locked = True         # Locking frame in place in RVIZ

		
		# Marker Global coordinates 
		msg_out.pose.position.x = location.position.x
		msg_out.pose.position.y = location.position.y
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Setting scale of marker (m)
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.2
		msg_out.scale.z = 0.5

		# Colour - green 
		msg_out.color.b = (128/255)
		msg_out.color.g = (255/255)
		msg_out.color.r = (0/255)
		msg_out.color.a = 1.0

		# Publishing the marker to RVIZ 
		rospy.loginfo('Publishing Target 2 Marker to RVIZ')
		self.marker_pub.publish(msg_out)

		rospy.loginfo("[x: %0.2f; y: %0.2f]" % (location.position.x,
						location.position.y))

	# RVIZ Markers
	def marker_vis (self, data):
		location = data.pose.pose

		# # Message header variables 
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now() 

		# Marker variables
		msg_out.ns = "ArUco"               # Namespace 
		msg_out.id = 0                      # ID of the marker
		msg_out.type = Marker.CUBE          # Shape choice 
		msg_out.action = Marker.ADD         # Action is to add / create a new marker
		msg_out.lifetime = rospy.Time(0)    # Lifetime set to Time(0) will make it last forever
		msg_out.frame_locked = True         # Locking frame in place in RVIZ

		
		# Marker Global coordinates 
		msg_out.pose.position.x = location.position.x
		msg_out.pose.position.y = location.position.y
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Setting scale of marker (m)
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.2
		msg_out.scale.z = 0.1

		# Make the square a white colour
		msg_out.color.b = (255/255)
		msg_out.color.g = (255/255)
		msg_out.color.r = (255/255)
		msg_out.color.a = 1.0

		# Publishing the marker to RVIZ 
		rospy.loginfo('Publishing ArUco Marker to RVIZ')
		self.marker_pub.publish(msg_out)

		rospy.loginfo("[x: %0.2f; y: %0.2f]" % (location.position.x,
						location.position.y))
		
	# For landing marker 	
	def marker_land (self, data):
		location = data.pose.pose

		# # Message header variables 
		msg_out = Marker()
		msg_out.header.frame_id = "map"
		msg_out.header.stamp = rospy.Time.now() 

		# Marker variables
		msg_out.ns = "Landing ArUco"        # Namespace 
		msg_out.id = 0                      # ID of the marker
		msg_out.type = Marker.CUBE          # Shape choice 
		msg_out.action = Marker.ADD         # Action is to add / create a new marker
		msg_out.lifetime = rospy.Time(0)    # Lifetime set to Time(0) will make it last forever
		msg_out.frame_locked = True         # Locking frame in place in RVIZ

		# Marker Global coordinates 
		msg_out.pose.position.x = location.position.x
		msg_out.pose.position.y = location.position.y
		msg_out.pose.position.z = 0.0
		msg_out.pose.orientation.w = 1.0
		msg_out.pose.orientation.x = 0.0
		msg_out.pose.orientation.y = 0.0
		msg_out.pose.orientation.z = 0.0

		# Setting scale of marker (m)
		msg_out.scale.x = 0.2
		msg_out.scale.y = 0.2
		msg_out.scale.z = 0.1

		# Make the square a blue colour
		msg_out.color.b = (255/255)
		msg_out.color.g = (0/255)
		msg_out.color.r = (0/255)
		msg_out.color.a = 1.0        # Full opacity

		# Publishing the marker to RVIZ 
		rospy.loginfo('Publishing Landing ArUco Marker to RVIZ')
		self.marker_pub.publish(msg_out)

		rospy.loginfo("[x: %0.2f; y: %0.2f]" % (location.position.x,
						location.position.y))

	# Function for directing marker/target global coordinates 
	def callback_detection(self, msg_in):
		# Extracting maker/target id from subscriber message 
		self.id = msg_in.id

		# Calling marker function to store coordinates in marker array
		if 0 <= self.id <= 100:
			rospy.loginfo("Saving marker coordinates into the array")
			#self.marker_vis(msg_in)		# Trigger RVIZ marker
			self.marker_storage(msg_in)

			if  self.id == self.landing_marker: 
				rospy.loginfo("Landing marker has been located") 
				self.marker_land(msg_in)
			else:
				rospy.loginfo("ArUco Marker has been located")
				self.marker_vis(msg_in)		# Trigger RVIZ marker

		elif self.id == 101:
			if not self.target1:
				self.target1 = True
				self.payload_id = self.id - 100
				self.target_one(msg_in)		# Trigger RVIZ marker
				rospy.loginfo("Triggering ROI Diversion for Target 1")
				self.inspect_roi(msg_in)

		elif self.id == 102:
			if not self.target2:
				self.target2 = True
				self.payload_id = self.id - 100
				self.target_two(msg_in)		# Trigger RVIZ marker
				rospy.loginfo("Triggering ROI Diversion for Target 2")
				self.inspect_roi(msg_in)

		
		# Letting the operator know when an invalid id message has been sent 
		elif self.id > 102:
			rospy.loginfo("Invalid ID transmitted")


	# Function to store global marker coordinates in the array 
	def marker_storage(self, msg_in):
		# Extracting the marker coordinates from the message
		self.coordinates = msg_in.pose.pose.position
		
		# Extracting the ArUco marker id number
		self.row = msg_in.id

		# Inserting coordinates into respective row number 
		self.markers[self.row,:] = [self.coordinates.x, self.coordinates.y]


	# Function to warn operator of low battery 
	def callback_battery(self, msg_in):
		self.batt_per = msg_in.percentage  
        
		if self.batt_per <= self.batt_check:
		
			if not self.battery: 
				self.battery = True
				
				self.waypoint_counter = len(self.waypoints)
				rospy.loginfo("Battery is critical")
				rospy.loginfo("Battery is critical")
				rospy.loginfo("Battery is critical")
            
            	# call landing function 


	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
	def inspect_roi(self, msg_in):
		# Set our flag that we are performing the diversion
		self.performing_roi = True

		# Extracting message data from new message type
		msg_in = msg_in.pose

		rospy.loginfo("Starting diversion to ROI...")
		# Cancel the current goal (if there is one)
		self.spar_client.cancel_goal()
		# Record our current location so we can return to it later
		start_location = self.current_location
		# XXX:	It would also be a good idea to capture "current yaw" from
		#		the pose to maintain that throughout a diversion

		# Set the "diversion waypoint" (at yaw zero)
		# dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z, 0.0]
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y + 0.05, 0.7, 0.0] #self.current_location.z, 0.0]
		# Set the "return waypoint" (at yaw zero)
		rwp = [self.current_location.x, self.current_location.y, self.current_location.z, 0.0]

		# XXX: Could pause here for a moment with ( "rospy.sleep(...)" ) to make sure the UAV stops correctly

		self.send_wp(dwp)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		rospy.loginfo("Reached diversion ROI!")
		# CODE FOR HOVER AND PAYLOAD DEPLOYMENT

		rospy.sleep(rospy.Duration(6))
		
		#self.payload_id = UInt8()
		self.payload_id = UInt8(self.payload_id)
		rospy.loginfo(f"Sending payload deployment {self.payload_id.data}")
		self.pub_payload.publish(self.payload_id.data)
		# 2 seconds to deploy payload
		# NOTE THIS IS TO BE REPLACED WITH A CONFIRMATION MESSAGE FROM PAYLOAD DEPLOYMENT
		rospy.sleep(rospy.Duration(2))
		rospy.loginfo("Returning to flight plan...")
		
		
		self.send_wp(start_location)
		self.spar_client.wait_for_result()
		if self.spar_client.get_state() != GoalStatus.SUCCEEDED:
			# Something went wrong, cancel out of guidance!
			rospy.signal_shutdown("cancelled")
			return

		# "waypoint_counter" represents the "next waypoint"
		# "waypoint_counter - 1" represents the "current waypoint"
		rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.waypoint_counter - 1))
		self.send_wp(self.waypoints[self.waypoint_counter - 1])
		# Unset our flag that we are performing a diversion
		# to allow the waypoint timer to take back over
		self.performing_roi = False

	# #Aruco marker detection handling
	# def detection_aruco(self,msg_in):
	# 	#This function is called by the aruco detection node/topic
	# 	#It will store the detected aruco marker and its position
	# 	#!NOTE !!!!!!position z is being used to store the marker id
		
	# 	#Store the detected marker position in the marker array (row index -1 matches the marker ID)
	# 	self.markers[msg_in.position.z-1,0] = msg_in.pose.position.x
	# 	self.markers[msg_in.position.z-1,1] = msg_in.pose.position.y


	# #Target detection handling ####MAYBE NOT NEEDED - EXISTION ROI DIVERSION MAY BE USED
	# def detection_target(self,msg_in):
	# 	#This function is called by the target detection node/topic
	# 	#It will store the detected aruco marker and its position
	# 	#!NOTE !!!!!!position z is being used to store the target id

	# This function is for convinience to simply send out a new waypoint
	def send_wp(self, wp):
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			rospy.logwarn("Invalid waypoint, skipped...")
			return False
			# raise ArgumentError("Invalid waypoint input!")

####### changed  ########################################
		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		#goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_linear
		goal.velocity_horizontal = self.vel_linear
		#goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.accuracy_pos
		goal.yaw_range = self.accuracy_yaw

		# For this function, we don't wait in the loop.
		# Instead we just send the waypoint and check up on it later
		# This checking is either with the "self.timer" for waypoints
		# or with direct calls during the ROI diversion
		self.spar_client.send_goal(goal)
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())

	

	# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
	# The main purpose is to check if a waypoint has been reached,
	# and if so, send out the next waypoint to continue the mission
	def check_waypoint_status(self, te):
		# If we're performing the ROI diversion, then don't do
		# anything here, as this is handled in that function
		if not self.performing_roi:
			# If the last segment has succeeded.
			# For more complex tasks, it might be necessary to also
			# check if you are in waypoint or breadcrum mode.
			# Hint: really, we should check for other status states
			#		(such as aborted), as there are some states
			#		where we won't recover from, and should just exit
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo("Reached waypoint %i!" % (self.waypoint_counter))

				# XXX:	Another check could go here to finish the mission early
				#		if "all" inspection tasks have been completed
				#		(Add in another "if" and make the waypoint counter check
				#		 an "elif" check instead.
				#		 i.e. if complete; elif more wps; else wps finished)
				if self.waypoint_counter < (len(self.waypoints)):

					if not self.breadcrumbMode:
						# Set up a path request for breadcrumb
						req = RequestPathRequest()
						req.start.x = self.waypoints[self.waypoint_counter-1][0] # Get X
						req.start.y = self.waypoints[self.waypoint_counter-1][1] # Get Y
						req.start.z = self.waypoints[self.waypoint_counter-1][2] # Get Z
						req.end.x = self.waypoints[self.waypoint_counter][0]	# Get next X
						req.end.y = self.waypoints[self.waypoint_counter][1]	# Get next Y
						req.end.z = self.waypoints[self.waypoint_counter][2]	# Get next Z

						res = self.srvc_bc(req)
						
						# Breadcrumb will return a vector of poses if a solution was found
						# If no solution was found (i.e. no solution, or request bad
						# start/end), then breadcrumb returns and empty vector
						# XXX: You could also use res.path_sparse (see breadcrumb docs)
						breadcrumbWPS = []
						if len(res.path.poses) > 0:
							# Print the path to the screen
							rospy.loginfo("Segment {}-1 to {}:".format(self.waypoint_counter,self.waypoint_counter))
							rospy.loginfo("[%0.2f;%0.2f;%0.2f] => [%0.2f;%0.2f;%0.2f]",
										req.start.x,req.start.y,req.start.z,
										req.end.x,req.end.y,req.end.z)

							# Loop through the solution returned from breadcrumb
							for i in range(len(res.path.poses)):
								rospy.loginfo("    [%0.2f;%0.2f;%0.2f]",
											res.path.poses[i].position.x,
											res.path.poses[i].position.y,
											res.path.poses[i].position.z)
								breadcrumbWPS.append([res.path.poses[i].position.x, res.path.poses[i].position.y, res.path.poses[i].position.z, 0.0])

							# Display the path
							# print(breadcrumbWPS)
							self.breadcrumbWPS = breadcrumbWPS
							self.display_path(breadcrumbWPS,"/guidance/pathBreadcrumb")
							self.breadcrumbMode = True
							self.breadcrumbWPSnextIndex = 0
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							self.breadcrumbWPSnextIndex +=1 

						else:
							rospy.logerr("solution not found")
							self.waypoint_counter += 1

					else:
						if self.breadcrumbWPSnextIndex < (len(self.breadcrumbWPS)):
							# We got here a breadcrumb path, we should exuted down here:
							self.send_wp(self.breadcrumbWPS[self.breadcrumbWPSnextIndex])
							# Increment our waypoint counter
							self.breadcrumbWPSnextIndex +=1
						else:
							# If we finish with the breadcrumb waypoints we increase normal waypoints
							
						    
							self.waypoint_counter += 1
							
							self.breadcrumbMode = False
				
					# rospy.loginfo("land_staging logical check: Waypoints complete: %s, self.land_staging: %s",self.waypoint_counter < (len(self.waypoints)), self.land_staging)
				elif not (self.waypoint_counter < (len(self.waypoints))) and not self.land_staging:
					rospy.loginfo("land_staging logical check: Waypoints complete: %s, self.land_staging: %s", not self.waypoint_counter < (len(self.waypoints)), self.land_staging)
					# Check that all waypoints have been completed and the drone has not yet completed the landing staging operation (hovering above landing site)
					#Initiate land_stage
					self.land_stage()
					print("Moving to landing staging area")
					# rospy.loginfo("landing logical check: Waypoints complete: %s, self.land_staging: %s",self.waypoint_counter < (len(self.waypoints)), self.land_staging)
				
				elif not (self.waypoint_counter < (len(self.waypoints))) and self.land_staging and not self.landed:
					rospy.loginfo("landing logical check: Waypoints complete: %s, self.land_staging: %s", not self.waypoint_counter < (len(self.waypoints)), self.land_staging)
					self.land()
					print("staging complete - begining landing")
				
				else:
					# Else the mission is over, shutdown and quit the node
					# XXX:	This could be used to restart the mission back to the
					#		first waypoint instead to restart the mission
					rospy.loginfo("Mission complete!")
					rospy.signal_shutdown("Complete, Wooh!")
			elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")

		# PRE BREADCRUMB CODE
		# # If we're performing the ROI diversion, then don't do
		# # anything here, as this is handled in that function
		# if not self.performing_roi:
		# 	# If the last segment has succeeded.
		# 	# For more complex tasks, it might be necessary to also
		# 	# check if you are in waypoint or diversion mode here.
		# 	# Hint: really, we should check for other status states
		# 	#		(such as aborted), as there are some states
		# 	#		where we won't recover from, and should just exit
		# 	if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				

		# 		# XXX:	Another check could go here to finish the mission early
		# 		#		if "all" inspection tasks have been completed
		# 		#		(Add in another "if" and make the waypoint counter check
		# 		#		 an "elif" check instead.
		# 		#		 i.e. if complete; elif more wps; else wps finished)
		# 		if self.waypoint_counter < (len(self.waypoints)):
		# 			rospy.loginfo("Reached waypoint %i!" % (self.waypoint_counter))
		# 			self.send_wp(self.waypoints[self.waypoint_counter])
		# 			# Increment our waypoint counter
		# 			self.waypoint_counter += 1
					
		# 			# if self.waypoint_counter == (len(self.waypoints)) and self.completed_payload_1 and self.completed_payload_2:
		# 			# 	file=2
		# 		# elif not (self.waypoint_counter < (len(self.waypoints))) and not self.land_staging:
		# 		# 	# Check that all waypoints have been completed and the drone has not yet completed the landing staging operation (hovering above landing site)
		# 		# 	#Initiate land_stage
		# 		# 	self.land_stage()
		# 		# 	print("landing at staging area")
					
		# 		# elif not (self.waypoint_counter < (len(self.waypoints))) and self.land_staging and not self.landed:
		# 		# 	self.land()
		# 		# 	print("staging complete")

		# 		else:
		# 			# Else the mission is over, shutdown and quit the node
		# 			# XXX:	This could be used to restart the mission back to the
		# 			#		first waypoint instead to restart the mission
		# 			rospy.loginfo("Aruco Marker locations")
		# 			print(self.markers)
		# 			rospy.loginfo("Mission complete!")
		# 			rospy.signal_shutdown("complete")
		# 	elif (self.spar_client.get_state() == GoalStatus.PREEMPTED) or (self.spar_client.get_state() == GoalStatus.ABORTED) or (self.spar_client.get_state() == GoalStatus.REJECTED):
		# 		rospy.loginfo("Mission cancelled!")
		# 		rospy.signal_shutdown("cancelled")

	# Display a path
	def display_path(self, wps, name):
		rospy.loginfo("Displaying path...")
		pub_path = rospy.Publisher(name, Path, queue_size=10, latch=True)
		msg = Path()
		msg.header.frame_id = "/map"
		msg.header.stamp = rospy.Time.now()
	
		for wp in wps:
			pose = PoseStamped()
			pose.pose.position.x = wp[0]
			pose.pose.position.y = wp[1]
			pose.pose.position.z = wp[2]
	
			pose.pose.orientation.w = 1.0
			pose.pose.orientation.x = 0.0
			pose.pose.orientation.y = 0.0
			pose.pose.orientation.z = 0.0
	
			msg.poses.append(pose)
		rospy.loginfo("Publishing path...")
		pub_path.publish(msg)

	def land_stage(self):
		
		#Check that the Aruco landing marker has been discovered, if not set default landing coordinate -1,-1
		if np.isnan(self.markers[self.landing_marker,0]) or np.isnan(self.markers[self.landing_marker,1]):
			# Set the landing waypoint at x:0, y:0, z:surveryAltitude, yaw:0
			self.landing_wp = [-1,-1,self.surveyAltitude, 0] 
			rospy.loginfo("Aruco marker %i not found: using default location [-1,-1] for landing staging area!" % (self.landing_marker))
		
		#Given that we have a valid coordinate stored in self.markers: Set x y based on selected landing ID
		else:
			self.landing_wp = [self.markers[self.landing_marker,0],self.markers[self.landing_marker,1],self.surveyAltitude,0]
			rospy.loginfo("Landing at Aruco marker %i: location [%i,%i], moving to landing staging area!" % (self.landing_marker, self.landing_wp[0], self.landing_wp[1]))
			
		
		self.land_staging = True
		self.send_wp(self.landing_wp)

	def land(self):
		#Uses the self.landing_wp fromm the previous function but with the altitude changes to zero, for the final landing waypoint
		rospy.loginfo("Landing at the previously defined landing waypoint with altitude of 0")
		self.landing_wp = [self.landing_wp[0],self.landing_wp[1],0,0]
		
		self.landed = True
		self.send_wp(self.landing_wp)
		

def main(args):
	# Initialise ROS
	rospy.init_node('guidance')
	surveyAltitude = rospy.get_param("~surveyAlt", 1.5)
	#surveyAltitude = 2
	# List of waypoints
	#surveyAltitude = 1.8
	# [X, Y, Z, Yaw]



#vertical
	wpsR1 = [[-1.0,-1.0, surveyAltitude, 0.0],	  # 0 takeoff
			 [-3.5,-2.0, surveyAltitude, 0.0],    # 1  r1
             [ 3.5,-2.0, surveyAltitude, 0.0],    # 2  r1
             [ 3.5,-1.25, surveyAltitude, 0.0],   # 3  r2
             [-3.5,-1.25, surveyAltitude, 0.0],   # 4  r2
             [-3.5,-0.5, surveyAltitude, 0.0],    # 5  r3
             [ 3.5,-0.5, surveyAltitude, 0.0],    # 6  r3
             [ 3.5,0.25, surveyAltitude, 0.0],    # 7  r4
             [-3.5,0.25, surveyAltitude, 0.0],    # 8  r4
             [-3.5, 1.0, surveyAltitude, 0.0],    # 9  r5
             [ 3.5, 1.0, surveyAltitude, 0.0],    # 10 r5
			 [ 3.5,1.75, surveyAltitude, 0.0],    # 11 r6
             [-3.5,1.75, surveyAltitude, 0.0],    # 12 r6
             [-3.5, 2.0, surveyAltitude, 0.0],    # 13 r7
             [ 3.5, 2.0, surveyAltitude, 0.0]]    # 14 r7
           
 


	# For 3 to 4m 
	wpsR2 = [[-1.0, -1.0, surveyAltitude, 0.0],	  # 0 takeoff
			 [-3.0, 2.0, surveyAltitude, 0.0],    # 1  r1
             [-3.0,-2.0, surveyAltitude, 0.0],    # 2  r1
             [-1.0,-2.0, surveyAltitude, 0.0],    # 3  r2
             [-1.0, 2.0, surveyAltitude, 0.0],    # 4  r2
             [ 1.0, 2.0, surveyAltitude, 0.0],    # 5  r3
             [ 1.0,-2.0, surveyAltitude, 0.0],    # 6  r3
             [ 3.0,-2.0, surveyAltitude, 0.0],    # 7  r4
             [ 3.0, 2.0, surveyAltitude, 0.0]]    # 8  r4
    
	

	if surveyAltitude < 2.9:
		wps = wpsR1
	else:
		wps = wpsR2


	# Create our guidance class option
	guide = Guidance(wps, surveyAltitude)

	

	# Spin!
	rospy.spin()


if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('Node Closed')


